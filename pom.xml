<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
		 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		 xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<!--规范-->
	<!--1.版本-->
	<!--1.1.同一个项目所有的模块版本相同-->
    <!--1.2.子模块全部继承父模块的版本-->
	<!--1.3.开发测试使用SNAPSHOT-->
	<!--1.4.生产发布使用RELEASE-->
	<!--1.5.新版本迭代只修改顶层POM中的版本-->
	<!--2.依赖-->
	<!--2.1.在顶层模块POM的<dependencyManagement/>节中定义所有子模块的依赖版本号，子模块中添加依赖时不要添加版本号-->
	<!--3.构建插件-->

	<!--实例-->
	<!--创建子模块-->
	<!--创建子模块-创建新的子模块-无下级模块-->
	<!--创建子模块-创建新的子模块-有下级模块-->
	<!--创建子模块-创建间隔文件夹的子模块-相对路径-->
	<!--依赖管理-->
	<!--依赖管理-父模块声明子模块使用-->
	<!--依赖管理-子模块间依赖使用-->
	<!--依赖管理-非继承方式管理依赖-依赖单独由一个pom聚集起来管理-->
	<!--SpringBoot-->
	<!--SpringBoot-非继承形式使用SpringBoot-->
	<groupId>example</groupId>
	<artifactId>example-parent</artifactId>
	<packaging>pom</packaging>

	<!--明确父项目的版本号-->
	<version>3.2.3-SNAPSHOT</version>

	<!--name，url，description-->
	<!--项目的名称标识，例如Netty就直接写做Netty，我们这里就直接写成Example-->
	<name>Example</name>
	<!--项目的官方网址，这里以netty来举例-->
	<url>http://netty.io</url>
	<description>用于学习的项目实例</description>

	<!--项目的组织名称和url-->
	<organization>
		<name>The Netty Project</name>
		<url>http://netty.io/</url>
	</organization>

	<!--项目的license信息-->
	<licenses>
		<license>
			<name>Apache License, Version 2.0</name>
			<url>http://www.apache.org/licenses/LICENSE-2.0</url>
		</license>
	</licenses>
	<!--项目创建时间-->
	<inceptionYear>2018</inceptionYear>

	<!--项目的仓库-->
	<scm>
	</scm>

	<!--项目的开发者，同样以Netty举例-->
	<developers>
		<developer>
			<id>netty.io</id>
			<name>The Netty Project Contributors</name>
			<email>netty@googlegroups.com</email>
			<url>http://netty.io/</url>
			<organization>The Netty Project</organization>
			<organizationUrl>http://netty.io/</organizationUrl>
		</developer>
	</developers>

	<!--待补充-->
	<profiles>
	</profiles>

	<!--属性管理-->
	<!--1.管理所有子模块共有的依赖版本-->
	<!--自定义属性信息-->
	<!--1.公共依赖定义：公共依赖是所有子模块所共有的模块，-->
	<!--所有公共依赖的版本都必须由当前parent管理，-->
	<!--子模块不允许声明公共模块的版本，子模块如果需要使用-->
	<!--公共模块，只需要声明依赖即可。对于只有子模块独有的依赖-->
	<!--则子模块可以自己单独声明版本，子模块的依赖尽量在-->
	<!--父模块中声明-->
	<!--1.公共模块版本规范必须为${groupId}_version的形式-->
	<!--2.公共模块的版本必须在properties中声明-->
	<properties>
		<vertx-web_version>3.5.4</vertx-web_version>
		<jctools-core_version>2.1.1</jctools-core_version>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
	</properties>

	<!--项目模块-->
	<!--1.具有聚合的功能-->
	<!--2.子模块也要求继承当前模块-->
	<modules>
		<module>algorithm</module>
		<module>concurrent</module>
        <module>design-pattern</module>
		<module>effective-java</module>
		<module>spring</module>
		<module>spring-boot</module>
		<module>pom-dependency/test.pom.xml</module>

		<!--创建子模块-创建新的子模块-无下级模块-->
		<module>son-module-template</module>
		<!--创建子模块-创建间隔文件夹的子模块-相对路径-->
		<module>directory/son-module-template1</module>
		<!--创建子模块-创建新的子模块-有下级模块-->
		<!--依赖管理-父模块声明子模块使用-->
		<!--依赖管理-子模块间依赖使用-->
		<!--尽量不要有嵌套模块，尽量保持模块深度只有一级，即只有parent和son-->
		<!--嵌套模块，此模块不依赖其它模块，且模块内保护多个模块（不依赖其它模块），则声明成pom-->
		<module>son-module-template2</module>
	</modules>

	<!--依赖管理-->
	<!--1.管理所有子模块共有的依赖-->
	<!--2.依赖的版本必须在properties声明，命名方式为依赖的artifactId_version-->
	<dependencyManagement>
		<dependencies>
			<!--依赖管理-父模块声明子模块使用-->
			<dependency>
				<groupId>io.vertx</groupId>
				<artifactId>vertx-web</artifactId>
				<version>${vertx-web_version}</version>
			</dependency>

			<!-- Java concurrency tools for the JVM -->
			<dependency>
				<groupId>org.jctools</groupId>
				<artifactId>jctools-core</artifactId>
				<version>${jctools-core_version}</version>
			</dependency>

			<dependency>
				<groupId>example</groupId>
				<artifactId>pom-dependency</artifactId>
				<version>1.0.0</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>

			<!--SpringBoot-非继承形式使用SpringBoot-->
			<!--非继承形式SpringBoot，且将其中的data的依赖的版本替换，替换的时候必须在boot前声明-->
			<!--非继承形式的SpringBoot没有构建插件，继承形式的SpringBoot是有插件的，如果需要插件则需要单独在插件管理中声明-->
			<!-- Override Spring Data release train provided by Spring Boot -->
			<dependency>
				<groupId>org.springframework.data</groupId>
				<artifactId>spring-data-releasetrain</artifactId>
				<version>Fowler-SR2</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-dependencies</artifactId>
				<version>2.0.6.RELEASE</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<!--非继承类依赖-->
	<dependencies>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
		</dependency>
	</dependencies>

	<!--构建-->
	<!--1.管理所有构建过程-->
	<build>
		<!--build的插件-->
		<plugins>

		</plugins>

		<!--插件管理-->
		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-compiler-plugin</artifactId>
					<version>3.8.0</version>
					<configuration>
						<source>1.8</source>
						<target>1.8</target>
					</configuration>
				</plugin>

				<plugin>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-maven-plugin</artifactId>
					<version>2.0.6.RELEASE</version>
					<executions>
						<execution>
							<goals>
								<goal>repackage</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>

	<!--仓库配置-->
	<!--一般也可以在maven的settings.xml中配置仓库地址-->
	<pluginRepositories>
		<pluginRepository>
			<id>maven-net-cn</id>
			<name>Maven China Mirror</name>
			<url>http://maven.net.cn/content/groups/public/</url>
			<!--告诉Maven可以从这个仓库下载releases版本的构件-->
			<releases>
				<enabled>true</enabled>
			</releases>
			<!--告诉Maven不要从这个仓库下载snapshot版本的构件-->
			<!--如果是私有仓库推荐开启，公共仓库推荐关闭，因为snapshot不稳定-->
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</pluginRepository>
	</pluginRepositories>

	<!--发布-->
	<!--mvn deploy-->
	<!--发布jar包，当需要将jar包发布到私有仓库的时候-->
	<distributionManagement>
		<repository>
			<id>nexus-releases</id>
			<name>Nexus Release Repository</name>
			<url>http://127.0.0.1:8080/nexus/content/repositories/releases/</url>
		</repository>
		<snapshotRepository>
			<id>nexus-snapshots</id>
			<name>Nexus Snapshot Repository</name>
			<url>http://127.0.0.1:8080/nexus/content/repositories/snapshots/</url>
		</snapshotRepository>
	</distributionManagement>
</project>